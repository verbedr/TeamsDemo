@page "/embedsa"
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Embed meeting (sa)</h1>

<p>Embed teams meeting in iframe using service account personal credentials</p>

<button class="btn btn-primary" @onclick="StartMeeting">Start meeting</button>

<p><a href="@meeting.JoinUrl" target="_blank">Open in new window</a></p>

<iframe src="@meeting.JoinUrl" height="667" width="375"></iframe>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<button class="btn btn-primary" @onclick="GetDetails">Load details</button>

@if (meetingResult != null)
{
    <p>@meetingResult.ChatInfo.ThreadId</p>
}

<button class="btn btn-primary" @onclick="CallRecord">Call Record</button>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();

    private OnlineMeeting meeting = new OnlineMeeting();
    private OnlineMeeting meetingResult = null;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/subscription"))
            .Build();

        hubConnection.On<string>("notify", (message) =>
        {
            messages.Add(message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }


    private async Task StartMeeting()
    {
        var response = await Http.PostAsJsonAsync("api/user/meetnow", new { });
        meeting = await response.Content.ReadFromJsonAsync<OnlineMeeting>();
    }

    private async Task GetDetails()
    {
        meetingResult = await Http.GetFromJsonAsync<OnlineMeeting>($"api/user/meetnow/{meeting.Id}");
    }

    private async Task CallRecord()
    {
        _ = await Http.GetFromJsonAsync<CallRecord>($"api/client/callrecords/{meeting.Id}");
    }
}